const mongoose = reuire("mongoose");

const taskDependencySchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },

  dependentTask: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Task",
    required: true,
  },

  prerequisiteTasks: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Task",
    required: true,
  },

  dependencyType: {
    type: String,
    enum: [
      "finish_to_start", // prerequisite must finish before dependent can start
      "start_to_start", // prerequisite must start before dependent can start
      "finish_to_finish", // prerequisite must finish before dependent can finish
      "start_to_finish", // prerequisite must start before dependent can finish
      "blocks", // prerequisite blocks dependent (most common)
      "subtask_of", // dependent is a subtask of prerequisite
      "related", // loose relationship, for reference only
    ],
    default: "finish_to_start",
  },

  // Lag time between tasks (in minutes)
  lag: {
    type: Number,
    default: 0, // No delay
  },
  lead: {
    type: Number,
    default: 0,
  },
  strength: {
    type: String,
    enum: ["soft", "medium", "hard"],
    default: "medium",
  },

  isActive: {
    type: Boolean,
    default: true,
  },

  // Reason for Dependency

  reason: {
    type: String,
    trim: true,
  },
  // Auto-generated or manually created
  isAutoGenerated: {
    type: Boolean,
    default: false,
  },
  // Confidence score for auto-generated dependencies
  confidence: {
    type: Number,
    min: 0,
    max: 1,
    default: 1,
  },

  // Status tracking
  status: {
    type: String,
    enum: [
      "pending",
      "ready", // prerequisite completed, dependent can proceed
      "violated", // dependency rule was broken
      "resolved", // dependency relationship completed
      "suspended", // temporarily inactive
    ],
    default: "pending",
  },

  // Violation tracking
  violations: [
    {
      violationType: {
        type: String,
        enum: ["started_early", "completed_out_of_order", "ignored"],
      },
      violationDate: Date,
      description: String,
      resolved: {
        type: Boolean,
        default: false,
      },
    },
  ],

  // Impact metrics

  impact: {
    scheduleImpact: {
      type: String,
      enum: ["low", "medium", "high", "critical"],
      default: "medium",
    },

    estimatedDelay: Number,

    violationCost: {
      type: String,
      enum: ["low", "medium", "high"],
      default: "medium",
    },
  },

  // Conditional dependencies
  conditions: [
    {
      type: {
        type: String,
        enum: [
          "prerequisite_progress",
          "date_condition",
          "resource_available",
          "approval_received",
        ],
      },
      value: String, // condition value (e.g., "80" for 80% progress)
      operator: {
        type: String,
        enum: [
          "equals",
          "greater_than",
          "less_than",
          "greater_equal",
          "less_equal",
        ],
        default: "greater_equal",
      },
      met: {
        type: Boolean,
        default: false,
      },
    },
  ],

  // Resource Dependencies

  resourceDependencies: [
    {
      resourceType: {
        type: String,
        enum: ["person", "tool", "location", "approval", "information"],
      },

      resourceId: String,
      required: {
        type: Boolean,
        default: true,
      },
    },
  ],
});
